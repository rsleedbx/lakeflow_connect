# limactl start --name=sqlserver17 https://raw.githubusercontent.com/rsleedbx/lakeflow_connect/refs/heads/main/vm/lima/sqlserver/sqlserver17.yaml
# limactl start --name=sqlserver17 sqlserver17.yaml
# for sqlserver sa password, find in the console log "SQL Server sa password is ${MSSQL_SA_PASSWORD}"
# tail -f ~/.lima/sqlserver17/serial*.log | grep -m 1 "SQL Server sa password is"
# grep -m 1 "SQL Server sa password is"  ~/.lima/sqlserver17/serial*.log
# refer to https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-release-notes-2022?view=sql-server-ver16
# Ubuntu 20.04, or 22.04       for sqlserver 2022
# Ubuntu 20.04, or 18.04 LTS 3 for sqlserver 2019
# Ubuntu 18.04 LTS 3           for sqlserver 2017

arch: "x86_64"

images:
  - location: "https://cloud-images.ubuntu.com/releases/18.04/release/ubuntu-18.04-server-cloudimg-amd64.img"

mounts:
  - location: "~"
  - location: "/tmp/lima"
    writable: true

containerd:
  system: false
  user: false

portForwards:
  - guestPort: 1433
    hostPort: 143302
    #hostIP: "0.0.0.0"  # uncomment to allow external connection

provision:
  - mode: system
    script: |
      #!/bin/sh
      # install sqlserver
      sudo wget -qO- https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
      # example of other sqlserver versions
      #sudo add-apt-repository -y "$(wget -qO- https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/mssql-server-2022.list)"
      #sudo add-apt-repository -y "$(wget -qO- https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/mssql-server-2019.list)"
      sudo add-apt-repository -y "$(wget -qO- https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/mssql-server-2017.list)"
      sudo apt-get update -y 
      sudo apt-get install -y dialog pwgen
      sudo apt-get install -y mssql-server 
      sudo touch /var/opt/mssql/mssql.demo
      cat <<EOF | sudo tee /var/opt/mssql/mssql.conf 
      [sqlagent]
      enabled = true

      [licensing]
      azurebilling = false

      [EULA]
      accepteula = Y

      [telemetry]
      customerfeedback = false
      EOF
      export MSSQL_SA_PASSWORD="$(pwgen -1)" 
      /opt/mssql/bin/mssql-conf set-sa-password
      sudo systemctl start mssql-server
      echo "SQL Server sa password is ${MSSQL_SA_PASSWORD}"

      # create database user
      export sql_cli_batch_mode="-h-1 -W -s , -w 1024"
      export DB_ARC_USER=arcsrc
      export DB_DB=arcsrc
      # sqlcmd options used for batch operation
      # -C Trust Server Certificate
      # -h headers (-1 removes headers)
      # -I Enable Quoted Identifiers
      # -P password
      # -s col separator
      # -U login id
      # -W remove trailing spaces
      # -w screen width
      cat <<EOF | cat <(printf "set NOCOUNT ON;\ngo\n") - | /opt/mssql-tools18/bin/sqlcmd -I -U "sa" -P "${MSSQL_SA_PASSWORD}" -C $sql_cli_batch_mode
      CREATE LOGIN ${DB_ARC_USER} WITH PASSWORD = '${MSSQL_SA_PASSWORD}'
      go
      create database ${DB_DB}
      go
      use ${DB_DB}
      go
      CREATE USER ${DB_ARC_USER} FOR LOGIN ${DB_ARC_USER} WITH DEFAULT_SCHEMA=dbo
      go
      ALTER ROLE db_owner ADD MEMBER ${DB_ARC_USER}
      go
      ALTER ROLE db_ddladmin ADD MEMBER ${DB_ARC_USER}
      go
      ALTER LOGIN ${DB_ARC_USER} WITH DEFAULT_DATABASE=[${DB_DB}]
      go
      EOF

      # install ngrok
      sudo snap install ngrok

probes:
  - script: |
      #!/bin/bash
      set -eux -o pipefail
      if ! timeout 30s bash -c "until nc -z localhost 1433; do sleep 3; done"; then
              echo >&2 "sqlserver is not running yet"
              exit 1
      fi
    hint: |
      SQL server is not up yet.
      Run "limactl shell sqlserver sudo tail /var/log/syslog" to check the log.
message: |
  SQL server is up!
